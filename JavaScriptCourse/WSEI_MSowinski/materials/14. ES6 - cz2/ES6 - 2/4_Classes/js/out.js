(()=>{{console.log("preparation task");class s{constructor(s){this.name=s}doAction(s){console.log(s)}}class o extends s{constructor(s){super(s)}boating(){super.doAction("Sail on a boat")}}class n extends s{constructor(s){super(s)}driving(){super.doAction("Drive a car")}}class c extends s{constructor(s){super(s)}flying(){super.doAction("Fly by plane")}}(new o).boating(),(new n).driving(),(new c).flying()}{console.log("\ntask 01 and task 04");class s{constructor(){this.type="common duck"}quack(){console.log("quack quack")}swim(){console.log("i`m swimming...")}show(){console.log("looks like "+this.type),this.fly()}fly(){console.log("i`m flying...")}}const o=new s;o.quack(),o.swim(),o.show(),console.log("\ntask 02");class n extends s{constructor(){super(),this.type="wild duck"}}const c=new n;c.quack(),c.swim(),c.show(),console.log("\ntask 03");class t extends s{constructor(){super(),this.type="crossed duck"}}const e=new t;e.quack(),e.swim(),e.show(),console.log("\ntask 05");class l extends s{constructor(){super(),this.type="gum duck",this.fly=()=>console.log("gum duck doesn`t know how to fly")}}const i=new l;i.quack(),i.swim(),i.show()}})();